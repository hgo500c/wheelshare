package GraphPackage;import java.util.Iterator;import ADTPackage.*;/**   A class that implements the ADT undirected graph.      @author Frank M. Carrano   @author Timothy M. Henry   @version 4.0*/public abstract class UndirectedGraph<T> extends DirectedGraph<T> implements GraphInterface<T>{	private DictionaryInterface<T, VertexInterface<T>> vertices;	private int edgeCount;	private road r;	public UndirectedGraph()	{		vertices = new LinkedDictionary<>();		edgeCount = 0;	} // end default constructor		public boolean addVertex(T vertexLabel,int x, int y)	{		VertexInterface<T> addOutcome = vertices.add(vertexLabel,new Vertex<>(vertexLabel,x,y));		return addOutcome == null; // Was addition to dictionary successful?	} // end addVertex			public boolean addEdge(T begin, T end, double width,boolean broken,int slope, String roadSurface, Boolean TrafficButton,double length,boolean cross,double averageSpeed,boolean ImpossibleSurface,boolean stairsupport)	{		return super.addEdge(begin, end,width,broken,slope,roadSurface,TrafficButton, length, cross, averageSpeed, ImpossibleSurface,stairsupport) &&             super.addEdge(end, begin, width,broken,slope,roadSurface,TrafficButton, length, cross, averageSpeed, ImpossibleSurface,stairsupport);	  // Assertion: edge count is twice its correct value due to calling addEdge twice	} // end addEdge			public int getNumberOfEdges()	{		return super.getNumberOfEdges() / 2;	} // end getNumberOfEdges	public StackInterface<T> getTopologicalOrder() 	{		throw new UnsupportedOperationException("Topological sort illegal in an undirected graph.");			} // end getTopologicalOrder} // end UndirectedGraph// To make addEdge more efficient, DirectedGraph needs to provide accessors // to its data fields. (See Project 3, Chapter 29.)